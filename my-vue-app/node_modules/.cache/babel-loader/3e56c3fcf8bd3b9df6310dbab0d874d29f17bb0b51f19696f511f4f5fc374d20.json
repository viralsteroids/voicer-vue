{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Web Sound Analysis\", -1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Formant 1: \" + _toDisplayString($data.formant1) + \" Hz\", 1), _createElementVNode(\"p\", null, \"Formant 2: \" + _toDisplayString($data.formant2) + \" Hz\", 1), _createElementVNode(\"p\", null, \"Tone: \" + _toDisplayString($data.tone) + \" Hz - Note: \" + _toDisplayString($data.note), 1), _createElementVNode(\"p\", null, \"Harmonic Ratio: \" + _toDisplayString($data.harmonicRatio) + \" dB\", 1), _createElementVNode(\"p\", null, \"Vowel Sound: \" + _toDisplayString($data.vowelSound), 1), _createElementVNode(\"p\", null, \"Number of Harmonics: \" + _toDisplayString($data.numHarmonics), 1)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$data","formant1","formant2","tone","note","harmonicRatio","vowelSound","numHarmonics"],"sources":["/workspace/voicer-vue/my-vue-app/src/components/AudioAnalyzer.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Web Sound Analysis</h1>\n    <p>Formant 1: {{ formant1 }} Hz</p>\n    <p>Formant 2: {{ formant2 }} Hz</p>\n    <p>Tone: {{ tone }} Hz - Note: {{ note }}</p>\n    <p>Harmonic Ratio: {{ harmonicRatio }} dB</p>\n    <p>Vowel Sound: {{ vowelSound }}</p>\n    <p>Number of Harmonics: {{ numHarmonics }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      formant1: 'N/A',\n      formant2: 'N/A',\n      tone: 'N/A',\n      harmonicRatio: 'N/A',\n      vowelSound: 'N/A',\n      numHarmonics: 0,\n      note: 'N/A',\n    };\n  },\n  mounted() {\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        const analyser = audioContext.createAnalyser();\n        const source = audioContext.createMediaStreamSource(stream);\n        source.connect(analyser);\n\n        analyser.fftSize = 2048;\n        const bufferLength = analyser.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n\n        const processAudio = () => {\n          analyser.getByteFrequencyData(dataArray);\n\n          const formant1Frequency = this.findPeakFrequency(dataArray, audioContext.sampleRate, 200, 400);\n          const formant2Frequency = this.findPeakFrequency(dataArray, audioContext.sampleRate, 1800, 2400);\n          const toneFrequency = this.findPeakFrequency(dataArray, audioContext.sampleRate, 60, 300);\n\n          this.formant1 = formant1Frequency;\n          this.formant2 = formant2Frequency;\n          this.tone = toneFrequency;\n          this.harmonicRatio = this.calculateHarmonicRatio(dataArray, toneFrequency);\n          this.numHarmonics = this.countHarmonics(dataArray, toneFrequency);\n          this.note = this.getNoteFromFrequency(toneFrequency);\n          this.vowelSound = this.identifyVowelSound(formant1Frequency, formant2Frequency);\n\n          requestAnimationFrame(processAudio);\n        };\n\n        processAudio();\n      })\n      .catch(err => console.error(err));\n  },\n  methods: {\n    findPeakFrequency(dataArray, sampleRate, minFreq, maxFreq) {\n      const nyquist = sampleRate / 2;\n      const startBin = Math.floor(minFreq / nyquist * dataArray.length);\n      const endBin = Math.floor(maxFreq / nyquist * dataArray.length);\n\n      let maxMagnitude = -Infinity;\n      let peakBin = startBin;\n\n      for (let i = startBin; i <= endBin; i++) {\n        if (dataArray[i] > maxMagnitude) {\n          maxMagnitude = dataArray[i];\n          peakBin = i;\n        }\n      }\n\n      return Math.round((peakBin * nyquist) / dataArray.length);\n    },\n    calculateHarmonicRatio(dataArray, fundamentalFreq) {\n      const harmonicSum = dataArray.reduce((acc, val, idx) => {\n        return idx % fundamentalFreq === 0 ? acc + val : acc;\n      }, 0);\n      const noiseSum = dataArray.reduce((acc, val) => acc + val, 0) - harmonicSum;\n\n      return (20 * Math.log10(harmonicSum / (noiseSum || 1))).toFixed(2);\n    },\n    countHarmonics(dataArray, fundamentalFreq) {\n      const threshold = 0.1 * Math.max(...dataArray);\n      let count = 0;\n\n      for (let i = fundamentalFreq; i < dataArray.length; i += fundamentalFreq) {\n        if (dataArray[i] >= threshold) {\n          count++;\n        }\n      }\n\n      return count;\n    },\n    identifyVowelSound(f1, f2) {\n      if (f1 >= 200 && f1 <= 400 && f2 >= 1800 && f2 <= 2400) {\n        return 'И';\n      } else if (f1 >= 350 && f1 <= 500 && f2 >= 700 && f2 <= 1200) {\n        return 'Э';\n      } else if (f1 >= 600 && f1 <= 800 && f2 >= 1000 && f2 <= 1200) {\n        return 'А';\n      } else if (f1 >= 300 && f1 <= 450 && f2 >= 700 && f2 <= 1000) {\n        return 'О';\n      } else if (f1 >= 250 && f1 <= 400 && f2 >= 600 && f2 <= 800) {\n        return 'У';\n      }\n      return 'N/A';\n    },\n    getNoteFromFrequency(frequency) {\n      const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n      const A4 = 440;\n      const semitoneOffset = 12 * Math.log2(frequency / A4);\n      const noteIndex = Math.round(semitoneOffset) % 12;\n      return noteNames[(noteIndex + 12) % 12];\n    }\n  }\n};\n</script>\n\n<style>\nh1 {\n  font-size: 24px;\n  margin-bottom: 16px;\n}\np {\n  font-size: 18px;\n  margin: 8px 0;\n}\n</style>\n"],"mappings":";gCAEIA,mBAAA,CAA2B,YAAvB,oBAAkB;;uBADxBC,mBAAA,CAQM,cAPJC,UAA2B,EAC3BF,mBAAA,CAAmC,WAAhC,aAAW,GAAAG,gBAAA,CAAGC,KAAA,CAAAC,QAAQ,IAAG,KAAG,MAC/BL,mBAAA,CAAmC,WAAhC,aAAW,GAAAG,gBAAA,CAAGC,KAAA,CAAAE,QAAQ,IAAG,KAAG,MAC/BN,mBAAA,CAA6C,WAA1C,QAAM,GAAAG,gBAAA,CAAGC,KAAA,CAAAG,IAAI,IAAG,cAAY,GAAAJ,gBAAA,CAAGC,KAAA,CAAAI,IAAI,OACtCR,mBAAA,CAA6C,WAA1C,kBAAgB,GAAAG,gBAAA,CAAGC,KAAA,CAAAK,aAAa,IAAG,KAAG,MACzCT,mBAAA,CAAoC,WAAjC,eAAa,GAAAG,gBAAA,CAAGC,KAAA,CAAAM,UAAU,OAC7BV,mBAAA,CAA8C,WAA3C,uBAAqB,GAAAG,gBAAA,CAAGC,KAAA,CAAAO,YAAY,M","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}